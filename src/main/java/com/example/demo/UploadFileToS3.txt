package com.example.demo;

//adopted from AWS Java SDK Documentation Example Code
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.backupstorage.model.PutObjectRequest;
import software.amazon.awssdk.services.s3.S3AsyncClient;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.ObjectIdentifier;
import software.amazon.awssdk.transfer.s3.S3TransferManager;
import software.amazon.awssdk.transfer.s3.model.CompletedDirectoryUpload;
import software.amazon.awssdk.transfer.s3.model.DirectoryUpload;
import software.amazon.awssdk.transfer.s3.model.UploadDirectoryRequest;

import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.UUID;

public class UploadFileToS3 {
    public int uploadDirectory(S3TransferManager transferManager, URI sourceDirectory, String bucketName) {
        System.out.println("1");
        DirectoryUpload directoryUpload = transferManager.uploadDirectory(UploadDirectoryRequest.builder()
                .source(Paths.get(sourceDirectory))
                .bucket(bucketName)
                .build());
        CompletedDirectoryUpload completedDirectoryUpload = directoryUpload.completionFuture().join();
        return completedDirectoryUpload.failedTransfers().size();
    }

    public String upload() throws Exception {
        // Replace 'your_access_key_id' and 'your_secret_access_key' with your actual
        // access keys
        String accessKeyId = "DO00K9G63VXHVGDU3WU6";
        String secretAccessKey = "trpALBZA2AUxUBHssaPqm+vHN24U1zO23RAd1WYj83o";
        Region region = Region.US_EAST_1;

        // Initialize AwsBasicCredentials with access keys
        AwsBasicCredentials awsCreds = AwsBasicCredentials.create(accessKeyId, secretAccessKey);

        // Initialize S3Client with explicit credentialscredentialscredentialscredentialscredentialscredentialscredentials
        S3Client s3 = S3Client.builder()
                .region(region) // specify your desired region
                .credentialsProvider(StaticCredentialsProvider.create(awsCreds))
                .build();

        // Now you can use the s3 client object to perform operations on S3
        S3TransferManager transferManager = S3TransferManager.create();

        /**
         * S3AsyncClient s3AsyncClient = S3AsyncClient.crtBuilder()
         * .credentialsProvider(StaticCredentialsProvider.create(awsCreds))
         * .region(Region.US_EAST_1)
         * .build();
         * 
         * S3TransferManager transferManager = S3TransferManager.builder()
         * .s3Client(s3AsyncClient)
         * .build();
         */
        File file = new File("report-output");
        URI uri = file.toURI();

        UploadFileToS3 hi = new UploadFileToS3();
        hi.uploadDirectory(transferManager, uri, "api-load-tester-html-reports");
        return "bye";
    }
}
*/

